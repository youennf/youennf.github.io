WARNING: This test should always be loaded in a new tab/window, to avoid browsers attempting to recover the state of frames, and history length. Do not reload the test.

Running test...









FAIL history.length should update when loading pages in an iframe assert_equals: make sure that you loaded the test in a new tab/window expected 101 but got 100(stack: assert@http://localhost:8800/resources/testharness.js:1738:42
assert_equals@http://localhost:8800/resources/testharness.js:335:15
http://localhost:8800/html/browsers/history/the-history-interface/001.html:41:35
step@http://localhost:8800/resources/testharness.js:798:30
test@http://localhost:8800/resources/testharness.js:73:22
tests1@http://localhost:8800/html/browsers/history/the-history-interface/001.html:41:7)
FAIL history.length should update when setting location.hash assert_equals: make sure that you loaded the test in a new tab/window expected 101 but got 100(stack: assert@http://localhost:8800/resources/testharness.js:1738:42
assert_equals@http://localhost:8800/resources/testharness.js:335:15
http://localhost:8800/html/browsers/history/the-history-interface/001.html:45:17
step@http://localhost:8800/resources/testharness.js:798:30
test@http://localhost:8800/resources/testharness.js:73:22
tests1@http://localhost:8800/html/browsers/history/the-history-interface/001.html:44:7)
PASS history.pushState must exist 
PASS history.pushState must exist within iframes 
PASS initial history.state should be null 
FAIL history.length should update when pushing a state assert_equals: expected 101 but got 100(stack: assert@http://localhost:8800/resources/testharness.js:1738:42
assert_equals@http://localhost:8800/resources/testharness.js:335:15
http://localhost:8800/html/browsers/history/the-history-interface/001.html:55:17
step@http://localhost:8800/resources/testharness.js:798:30
test@http://localhost:8800/resources/testharness.js:73:22
tests1@http://localhost:8800/html/browsers/history/the-history-interface/001.html:52:7)
PASS history.state should update after a state is pushed 
PASS history.length should not decrease after going back 
PASS traversing history must traverse pushed states 
PASS traversing history must also traverse hash changes 
PASS pushState must not be allowed to create invalid URLs 
PASS pushState must not be allowed to create cross-origin URLs 
PASS pushState must not be allowed to create cross-origin URLs (about:blank) 
PASS pushState must not be allowed to create cross-origin URLs (data:URI) 
PASS security errors are expected to be thrown in the context of the document that owns the history object 
PASS location.hash must be allowed to change (part 1) 
PASS location.hash must be allowed to change (part 2) 
PASS pushState must not alter location.hash when no URL is provided 
PASS pushState must remove all history after the current state 
PASS pushState must be able to set location.hash 
FAIL pushState must remove any tasks queued by the history traversal task source assert_equals: expected "test4" but got "test3"(stack: assert@http://localhost:8800/resources/testharness.js:1738:42
assert_equals@http://localhost:8800/resources/testharness.js:335:15
http://localhost:8800/html/browsers/history/the-history-interface/001.html:143:17
step@http://localhost:8800/resources/testharness.js:798:30
test@http://localhost:8800/resources/testharness.js:73:22
tests8@http://localhost:8800/html/browsers/history/the-history-interface/001.html:142:7)
PASS pushState must not fire hashchange events 
PASS pushState must be able to set location.pathname 
PASS pushState must be able to set absolute URLs to the same host 
PASS pushState must not be able to use a function as data 
PASS pushState must not be able to use a DOM node as data 
PASS pushState must not be able to use an error object as data 
PASS security errors are expected to be thrown in the context of the document that owns the history object 
PASS pushState must be able to make structured clones of complex objects 
PASS history.state should also reference a clone of the original object 
PASS history.state should be a clone of the original object, not a reference to it 
PASS popstate event should fire when navigation occurs 
PASS popstate event should pass the state data 
PASS state data should cope with circular object references 
PASS state data should be a clone of the original object, not a reference to it 
PASS history.state should also reference a clone of the original object 
PASS history.state should be a clone of the original object, not a reference to it 
FAIL history.state should be a separate clone of the object, not a reference to the object passed to the event handler assert_false: expected false got true(stack: assert@http://localhost:8800/resources/testharness.js:1738:42
assert_false@http://localhost:8800/resources/testharness.js:306:15
http://localhost:8800/html/browsers/history/the-history-interface/001.html:278:16
step@http://localhost:8800/resources/testharness.js:798:30
test@http://localhost:8800/resources/testharness.js:73:22
tests11@http://localhost:8800/html/browsers/history/the-history-interface/001.html:277:7
http://localhost:8800/html/browsers/history/the-history-interface/001.html:237:99)
PASS pushState should not actually load the new URL 
PASS reloading a pushed state should actually load the new URL 

